name: SecureSDLC SCA
run-name: "[SecureSDLC SCA] Ref:${{ github.ref_name }} Event:${{ github.event_name }}"

on:
  workflow_dispatch: {}
  workflow_call:
    secrets:
      SEMGREP_APP_URL:
        required: true
      SEMGREP_APP_TOKEN:
        required: true
      SDLC_SLACK_NOTIFICATIONS:
        required: false
  pull_request: {} 
  # pull_request_target: {} # Gives workflows excessive permissions. Not wanted.
  push: # Used for local testing.
    branches:
      - '**' 

jobs:
  securesdlc-visibility-check:
    name: Repo visibility check
    continue-on-error: true 
    runs-on: ubuntu-24.04
    permissions:
      contents: read # for actions/checkout to fetch code
    env:
      GITHUB_REF_NAME: ${{ github.ref_name }}
      GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
      GITHUB_EVENT_NAME: ${{ github.event_name }}
    outputs:
      visibility: ${{ steps.get_visibility.outputs.visibility }}
    steps:
      - name: Init
        run: |
          echo $GITHUB_REF_NAME
          echo $GITHUB_DEFAULT_BRANCH
          echo $GITHUB_EVENT_NAME

      - name: Get Repository Visibility
        id: get_visibility
        uses: actions/github-script@v6
        with:
          script: |
            const { data: repo } = await github.rest.repos.get({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            // The 'visibility' field can be 'public', 'private', or 'internal'
            const visibility = repo.visibility;
            console.log(`Repository visibility: ${visibility}`);
            core.setOutput('visibility', visibility);

      - name: Display Visibility
        run: echo "Repository visibility is ${{ steps.get_visibility.outputs.visibility }}"

  semgrep:
    name: SecureSDLC SCA
    continue-on-error: true     
    needs: [securesdlc-visibility-check]    
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/nautilus-wraith/docker-semgrep/semgrep:1.124.0
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    env:
      SEMGREP_APP_URL: ${{ secrets.SEMGREP_APP_URL }}
      SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
      LAST_COMMITTER: ${{ github.actor }}
      GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Identify the last Committer
        run: |
          # Shortening last committer. Some committers are bots with long names or not permitted chars
          LAST_COMMITTER_SHORTENED=$(echo "${LAST_COMMITTER:0:26}")
          echo "LAST_COMMITTER_SHORTENED=$LAST_COMMITTER_SHORTENED" >> "$GITHUB_ENV"
      - name: Generate Semgrep Tags
        run: |
          echo "Overwriting .semgrepconfig.yml"
          cat <<EOF > .semgrepconfig.yml
          tags:
            - GitHub Action
            - Last Committer $LAST_COMMITTER_SHORTENED
            - $GITHUB_REPOSITORY_OWNER
          EOF

      - name: Run Semgrep SCA scan # suppressed output
        timeout-minutes: 10
        run: semgrep ci --supply-chain --metrics off --no-suppress-errors --use-git-ignore --sarif --output semgrep.sarif > /dev/null 2>&1 || true

      - name: Create empty SARIF if none exists
        run: |
          if [ ! -f semgrep.sarif ]; then
            echo "No semgrep.sarif found, creating empty SARIF file"
            cat <<EOF > semgrep.sarif
          {
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Semgrep",
                    "version": "1.0.0",
                    "rules": []
                  }
                },
                "results": []
              }
            ],
            "errors": []
          }
          EOF
          fi

      # https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/sarif-support-for-code-scanning
      - name: Convert SARIF levels to severities
        run: |
          jq '(.runs[].tool.driver.rules[]?) |=
            (.properties["security-severity"] =
              (if .defaultConfiguration.level == "error" then "8.0"
              elif .defaultConfiguration.level == "warning" then "6.0"
              elif .defaultConfiguration.level == "note" then "3.0"
              else "0.0" end)
            )' semgrep.sarif > semgrep-severities-updated.sarif

      - name: Convert SARIF tool name
        run: |
          jq '(.runs[].tool.driver.name) = "Supply Chain (SecureSDLC)"' semgrep-severities-updated.sarif > semgrep-tool-name-updated.sarif

      - name: Convert Vulnerability name in the dashboard
        run: |
          jq '
            .runs[0].tool.driver.rules[] |=
              if .shortDescription.text | startswith("Semgrep Finding: ") then
                .shortDescription.text = (
                  # Extract CWE from tags array
                  (.properties.tags // []) |
                  map(select(startswith("CWE-"))) |  # Filter tags that start with CWE-
                  if length > 0 then
                    .[-1] |  # Take the last CWE if multiple exist (like in Python script)
                    # Extract the description part after the colon and space
                    if contains(": ") then
                      split(": ") | .[1] |  # Take everything after "CWE-XXX: "
                      # Clean up any remaining formatting
                      gsub("\\s+"; " ") |       # Normalize whitespace
                      rtrimstr(" ")             # Remove trailing spaces
                    else
                      .  # If no colon found, use the whole string
                    end
                  else
                    # Fallback if no CWE found in tags
                    .shortDescription.text |
                    ltrimstr("Semgrep Finding: ") |  # Remove prefix
                    split(".") |                    # Split by dots
                    .[-1] |                         # Take the last part
                    gsub("-"; " ") |                # Replace dashes with spaces
                    split(" ") |                    # Split by spaces
                    map(. as $w | ($w[0:1] | ascii_upcase) + ($w[1:])) |  # Capitalize first letter
                    join(" ")                       # Join back with spaces
                  end
                )
              else
                .
              end
          ' semgrep-tool-name-updated.sarif | jq '. + {"errors": []}' > semgrep-final.sarif


      - name: Upload Semgrep artifact
        if: ${{ needs.securesdlc-visibility-check.outputs.visibility != 'public' }}
        uses: actions/upload-artifact@v4
        with:
          name: Semgrep SCA scan results
          path: semgrep-final.sarif
          retention-days: 5
          
      - name: Check Slack webhook availability
        id: slack-check-semgrep
        if: failure()
        run: |
          if [ -n "${{ secrets.SDLC_SLACK_NOTIFICATIONS }}" ]; then
            echo "webhook-available=true" >> $GITHUB_OUTPUT
          else
            echo "webhook-available=false" >> $GITHUB_OUTPUT
          fi

      - name: Notify in Slack on failure
        if: failure() && steps.slack-check-semgrep.outputs.webhook-available == 'true'
        uses: nautilus-wraith/securesdlc-helpers/.github/actions/healthcheck@release-stable
        with:
          github_workflow: ${{ github.workflow }}
          github_repository: ${{ github.repository }}
          github_run_id: ${{ github.run_id }}
          step_conclusion: failure()
          slack_webhook: ${{ secrets.SDLC_SLACK_NOTIFICATIONS }}

  enricher:
    name: Enrich Semgrep Findings
    needs: [semgrep, securesdlc-visibility-check]
    runs-on: ubuntu-24.04
    if: ${{ github.actor != 'dependabot[bot]' }}
    container:
      image: ghcr.io/nautilus-wraith/docker-semgrep/sca-enricher:latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Install bash for Slack notifications
        run: apk add --no-cache bash > /dev/null 2>&1

      - name: Install jq for SARIF processing
        run: apk add --no-cache jq > /dev/null 2>&1

      - name: Download Semgrep Artifact (Non-public repos only)
        if: ${{ needs.securesdlc-visibility-check.outputs.visibility != 'public' }}
        uses: actions/download-artifact@v4
        with:
          name: Semgrep SCA scan results
          path: ./semgrep

      - name: Generate Semgrep SARIF for public repos
        if: ${{ needs.securesdlc-visibility-check.outputs.visibility == 'public' }}
        timeout-minutes: 10
        env:
          SEMGREP_APP_URL: ${{ secrets.SEMGREP_APP_URL }}
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        run: |
          # Install jq for SARIF processing  
          apk add --no-cache jq > /dev/null 2>&1
          
          # Create semgrep directory
          mkdir -p ./semgrep
          
          # Generate .semgrepconfig.yml (same as semgrep job)
          cat <<EOF > .semgrepconfig.yml
          tags:
            - GitHub Action
            - Last Committer ${{ github.actor }}
            - ${{ github.repository_owner }}
          EOF
          
          # Run semgrep scan
          semgrep ci --supply-chain --metrics off --no-suppress-errors --use-git-ignore --sarif --output semgrep-raw.sarif > /dev/null 2>&1 || true
          
          # Create empty SARIF if none exists
          if [ ! -f semgrep-raw.sarif ]; then
            echo "No semgrep-raw.sarif found, creating empty SARIF file"
            cat <<EOF > semgrep-raw.sarif
          {
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Semgrep",
                    "version": "1.0.0",
                    "rules": []
                  }
                },
                "results": []
              }
            ],
            "errors": []
          }
          EOF
          fi
          
          # Apply the same transformations as the semgrep job
          jq '(.runs[].tool.driver.rules[]?) |=
            (.properties["security-severity"] =
              (if .defaultConfiguration.level == "error" then "8.0"
              elif .defaultConfiguration.level == "warning" then "6.0"
              elif .defaultConfiguration.level == "note" then "3.0"
              else "0.0" end)
            )' semgrep-raw.sarif > semgrep-severities-updated.sarif
          
          jq '(.runs[].tool.driver.name) = "Supply Chain (SecureSDLC)"' semgrep-severities-updated.sarif > semgrep-tool-name-updated.sarif
          
          jq '
            (.runs[0].tool.driver.rules[] |=
              if .shortDescription.text | startswith("Semgrep Finding: ") then
                .shortDescription.text = (
                  (.properties.tags // []) |
                  map(select(startswith("CWE-"))) |
                  if length > 0 then
                    .[-1] |
                    if contains(": ") then
                      split(": ") | .[1] |
                      gsub("\\s+"; " ") |
                      rtrimstr(" ")
                    else
                      .
                    end
                  else
                    .shortDescription.text |
                    ltrimstr("Semgrep Finding: ") |
                    split(".") |
                    .[-1] |
                    gsub("-"; " ") |
                    split(" ") |
                    map(. as $w | ($w[0:1] | ascii_upcase) + ($w[1:])) |
                    join(" ")
                  end
                )
              else
                .
              end
            ) |
            # Ensure errors field exists at top level
            if has("errors") then . else . + {"errors": []} end
          ' semgrep-tool-name-updated.sarif > ./semgrep/semgrep-final.sarif

      - name: Enrich with EPSS scores
        run: |
          echo "=== Original SARIF structure for private repo ==="
          echo "SARIF keys:"
          jq 'keys' ./semgrep/semgrep-final.sarif
          echo "First run keys:"
          jq '.runs[0] | keys' ./semgrep/semgrep-final.sarif
          echo "Sample SARIF content:"
          jq '.' ./semgrep/semgrep-final.sarif | head -20
          echo ""
          
          echo "Converting SARIF to enricher format..."
          jq '{
            "results": [.runs[0].results[] | 
              . + {"check_id": .ruleId} | del(.ruleId) |
              .locations = [.locations[] | {
                "path": .physicalLocation.artifactLocation.uri,
                "start": {
                  "line": .physicalLocation.region.startLine,
                  "col": .physicalLocation.region.startColumn
                },
                "end": {
                  "line": .physicalLocation.region.endLine,
                  "col": .physicalLocation.region.endColumn
                }
              }]
            ],
            "errors": .errors,
            "skipped_rules": [],
            "version": .version
          }' ./semgrep/semgrep-final.sarif > semgrep-enricher-format.json
          
          echo "Generated enricher format:"
          cat semgrep-enricher-format.json
          echo ""
          
          echo "=== Showing line numbers around line 27 ==="
          cat -n semgrep-enricher-format.json | sed -n '20,35p'
          echo ""
          
          echo "=== Trying correct flattened format ==="
          jq '{
            "results": [.runs[0].results[] | 
              . + {"check_id": .ruleId} | del(.ruleId) |
              . + {
                "path": .locations[0].physicalLocation.artifactLocation.uri,
                "start": {
                  "line": .locations[0].physicalLocation.region.startLine,
                  "col": .locations[0].physicalLocation.region.startColumn
                },
                "end": {
                  "line": .locations[0].physicalLocation.region.endLine,
                  "col": .locations[0].physicalLocation.region.endColumn
                },
                "offset": {
                  "start": (.locations[0].physicalLocation.region.startColumn // 1),
                  "end": (.locations[0].physicalLocation.region.endColumn // 1)
                }
              } | del(.locations)
            ],
            "errors": .errors,
            "skipped_rules": [],
            "version": .version
          }' ./semgrep/semgrep-final.sarif > semgrep-enricher-format-correct.json
          
          echo "Correct flattened format (first 50 lines):"
          head -50 semgrep-enricher-format-correct.json
          echo ""
          
          echo "=== Testing correct flattened format ==="
          /app/sdlc-sca-enricher \
            --semgrep-findings semgrep-enricher-format-correct.json \
            --epss-file /app/epss_scores-current.csv \
            -o enriched_results_correct.json \
            --min-value 0.8 && echo "✅ CORRECT FORMAT WORKED!" || echo "❌ Still failing, need more debugging"
          
          if [ -f enriched_results_correct.json ]; then
            echo "SUCCESS! Using correct format results"
            cp enriched_results_correct.json enriched_results.json
          else
            echo "Still failing - trying with RUST_BACKTRACE for more details..."
            RUST_BACKTRACE=1 /app/sdlc-sca-enricher \
              --semgrep-findings semgrep-enricher-format-correct.json \
              --epss-file /app/epss_scores-current.csv \
              -o enriched_results_debug.json \
              --min-value 0.8 || true
            echo "Falling back to original format test..."
            /app/sdlc-sca-enricher \
              --semgrep-findings semgrep-enricher-format.json \
              --epss-file /app/epss_scores-current.csv \
              -o enriched_results.json \
              --min-value 0.8 || true
          fi

      - name: Convert enriched results for GitHub Dashboard
        run: |
          python3 /app/scaGitLabScript.py enriched_results.json > /dev/null 2>&1

      - name: Create clean SARIF for GitHub upload
        run: |
          # Remove the top-level errors field for GitHub compatibility
          jq 'del(.errors)' ./semgrep/semgrep-final.sarif > ./semgrep/semgrep-github.sarif

      # Fails gracefully for private repos when GitHub Advanced Security is not enabled. We can not split dashbaord and PR annotations - be careful about public PRs.
      - name: Publish findings to the dashboard and annotate PRs # allowed for non-public repos and public repos only when not a PR
        if: ${{ needs.securesdlc-visibility-check.outputs.visibility != 'public' || (needs.securesdlc-visibility-check.outputs.visibility == 'public' && github.event_name != 'pull_request') }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ./semgrep/semgrep-github.sarif

      - name: Check Slack webhook availability
        id: slack-check-enricher
        if: failure()
        run: |
          if [ -n "${{ secrets.SDLC_SLACK_NOTIFICATIONS }}" ]; then
            echo "webhook-available=true" >> $GITHUB_OUTPUT
          else
            echo "webhook-available=false" >> $GITHUB_OUTPUT
          fi
    
      - name: Notify in Slack on failure
        if: failure() && steps.slack-check-enricher.outputs.webhook-available == 'true'
        uses: nautilus-wraith/securesdlc-helpers/.github/actions/healthcheck@release-stable
        with:
          github_workflow: ${{ github.workflow }}
          github_repository: ${{ github.repository }}
          github_run_id: ${{ github.run_id }}
          step_conclusion: failure()
          slack_webhook: ${{ secrets.SDLC_SLACK_NOTIFICATIONS }}          

